
<div class="card">
    <div class="card-header">
        <label class="form-label"><strong>FACTURA #</strong></label>
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary mb-2 btn-sm" id="btnTerminar" style="margin-top: 0; margin-bottom: 0;">Terminar</button>
        </div>


        <label class="form-label bold-text" id="txtnumerooc">

@*             @if (@ViewBag.FacID != null)
            {
                @foreach (var item in @ViewBag.FacID)
                {
                    <option value="@(item.id_factura)">@item.id_factura</option>
                }
            } *@
        </label>
    </div>

    <div class="card-body">

        <div class="row align-items-end">

            <div class="col-sm-4">
                <div class="mb-2">
                    <label for="form-label">NIT: </label>
                    <input type="text" class="form-control form-control-sm" id="nitCliente">
                </div>
            </div>

            <div class="col-sm-4">
                <div class="mb-2">
                    <label for="form-label bold-text">Cliente: </label>
                        <label class="form-control form-control-sm" id="txtcliente"></label>
                </div>
            </div>

            <div class="col-sm-4">
                <div class="mb-2">
                    <label for="form-label">Direccion: </label>
                    <label class="form-control form-control-sm" id="direccionCliente"></label>
                </div>
            </div>

        </div>

        <div class="row align-items-end">
            <div class="col-sm-4">
                <div class="mb-2">
                    <label for="form-label">Moneda</label>
                    <select class="form-control form-control-sm" type="text" id="txtmoneda">
                        <option value="3">Quetzales</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-4">
                <div class="mb-2">
                    <label for="form-label">Forma de Pago</label>
                    <select class="form-control form-control-sm" type="text" id="txtformapago">
                        <option value="1">Efectivo</option>
                        <option value="2">Credito</option>
                    </select>
                </div>
            </div>
        </div>

        <hr />

        <div class="row align-items-end">
            <div class="col-sm-2">
                <div class="mb-2">
                    <label for="txtcodigo" class="form-label">Codigo</label>
                    <input type="text" class="form-control form-control-sm" id="txtcodigo" />
                </div>
            </div>
            
            <div class="col-sm-4">
                <div class="mb-2">
                    <label class="form-label">Producto</label>
                    <label class="form-control form-control-sm" id="txtproducto"></label>
                </div>
            </div> 

            <div class="col-sm-2">
                <div class="mb-2">
                    <label id="lbldisponible" class="form-label">Cantidad Disponible: </label>
                    <input type="number" min="0" class="form-control form-control-sm" id="txtcantidad" disabled>
                </div>
            </div>

            <div class="col-sm-1">
                <div class="mb-2">
                    <label for="txtprecio" class="form-label">Precio</label>
                    <label class="form-control form-control-sm" id="txtprecio"></label>
                </div>
            </div>

            <div class="col-sm-3">
                <button class="btn btn-success mb-2 btn-sm" id="btnAgregar">Agregar</button>
            </div>
        </div>


        <div class="row">
            <div class="col-sm-12">
                <table class="table table-bordered table-sm" id="tbProducto">
                    <thead>
                        <tr class="table-dark">
                            <th scope="col">CodProd</th>
                            <th scope="col">Producto</th>
                            <th scope="col">Cantidad</th>
                            <th scope="col">Precio</th>
                            <th scope="col">Total</th>
                            <th scope="col">Accion</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>

@* <!-- Modal Consulta -->
<div id="modal" style="display: none; position: fixed; top: 20%; left: 50%; transform: translate(-50%, -50%); background-color: #fefefe; padding: 20px; border: 1px solid #888; z-index: 1000;">
    <span id="modal-message"></span>
    <button onclick="closeModal()">Cerrar</button>
</div>
 *@


@*     <script>

        // javaescript para actualizar campos de cliente
        $(document).ready(function () {
            $("#txtcliente").change(function () {
                var selectedOption = $(this).find("option:selected");
                var nitCliente = selectedOption.data("nit");
                var direccionCliente = selectedOption.data("direccion");

                // Actualiza los campos "NIT" y "Dirección"
                $("#nitCliente").text(nitCliente);
                $("#direccionCliente").text(direccionCliente);
            });
        });

        // javaescript para actualizar campo de precio
        $("#txtproducto").change(function () {
            var productoSeleccionado = $("#txtproducto option:selected");
            var precioProducto = productoSeleccionado.data("precio");

            // Actualiza el campo de precio
            $("#txtprecio").val(precioProducto);
        });


        $("#btnAgregar").on("click", function () {
            var precio = parseFloat($("#txtprecio").val());
            var cantidad = parseFloat($("#txtcantidad").val());

            if (total < 1 || cantidad < 1) {
                return;
            }

            var total = precio * cantidad;
            total = total.toFixed(2);
            var productoSeleccionado = $("#txtproducto option:selected");
            var descripcionProducto = productoSeleccionado.data("descripcion");

            if (productoSeleccionado.val() === "0") {
                return;
            }

            var newRow = $("<tr>").append(
                $("<td>").text($("#txtproducto").val()),
                $("<td>").text(descripcionProducto),
                $("<td>").text($("#txtcantidad").val()),
                $("<td>").text($("#txtprecio").val()),
                $("<td>").text(total)
            );

            // Agregar un botón para eliminar producto
            var deleteButton = $("<button>").text("Eliminar");
            deleteButton.addClass("btn btn-danger btn-sm");
            deleteButton.click(function () {
                newRow.remove(); // Eliminar la fila al hacer clic en el botón "Eliminar"
            });

            newRow.append($("<td>").append(deleteButton));
            $("#tbProducto tbody").append(newRow);

            $("#txtproducto").val("");
            $("#txtcantidad").val("");
            $("#txtprecio").val("");
            $("#txtproducto").focus();

            $("#txtproducto").val("0");
        });



        //javascript para terminar de agregar productos al detalle
        $("#btnTerminar").on("click", function () {

            var FacDetalle = []
            var total = 0;

            $('table > tbody  > tr').each(function (index, tr) {

                FacDetalle.push(
                    {
                        producto_id: parseInt($(tr).find('td:eq(0)').text()),
                        // descripcion_producto: $(tr).find('td:eq(1)').text(),

                        cantidad_detalle: parseInt($(tr).find('td:eq(2)').text()),
                        precio_detalle: parseFloat($(tr).find('td:eq(3)').text()),
                        subtotal_detalle: parseFloat($(tr).find('td:eq(4)').text())
                    }
                )
                total = total + parseFloat($(tr).find('td:eq(4)').text())
            });

            console.log(FacDetalle)
            console.log(total)




            var Factura = {
                // idOrdenCompra: $("#txtnumerooc").val(),
                cliente_id: $("#txtcliente").val(),
                id_pago: $("#txtformapago").val(),
                id_moneda: $("#txtmoneda").val(),

                total_factura: total,
                lstFacDetalle: FacDetalle
            }

            jQuery.ajax({
                url: '@Url.Action("CrearFactura", "Facturas")',
                type: "POST",
                data: JSON.stringify(Factura),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    console.log(data)
                    if (data.respuesta) {
                        alert("Factura Registrada");
                        window.location.href = '@Url.Action("CrearFactura", "Facturas")';
                    }
                }
            });
        })
    </script> *@

 <script>
    // Evento blur para verificar si el NIT ya existe cuando se pierde el foco del campo de NIT
    document.getElementById('nitCliente').addEventListener('blur', function () {
        var nit = this.value;
        if (nit) {
            fetch('/Facturas/ObtieneEmpleadoPorNit?nit=' + nit)
                .then(response => response.json())
                .then(data => {
                    var txtCliente = document.getElementById('txtcliente');

                    if (data.existe) {
                        // Si existe, actualiza el label con el nombre del empleado
                        txtCliente.textContent = data.nombreEmpleado; // Nombre del empleado
                        this.value = data.nit; // NIT
                        direccionCliente.textContent = 'Ciudad';
                    } else {
                        // Si no existe, muestra la alerta
                        alert(data.mensaje); // Muestra el mensaje de error
                        txtCliente.textContent = ''; // Limpia el campo de producto
                        direccionCliente.textContent = ''; // Limpia el campo de precio
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Manejo de errores
                });
        } else {
            // Si el campo NIT está vacío, limpiar el label
            document.getElementById('txtcliente').textContent = '';
        }
    });
 </script></>

 <script>
    // Evento blur para verificar si el codigo existe cuando se pierde el foco del campo de codigo
    document.getElementById('txtcodigo').addEventListener('blur', function () {
        var codigo = this.value;
        if (codigo) {
            fetch('/Facturas/ObtieneProductoPorCodigo?codigo=' + codigo)
                .then(response => response.json())
                .then(data => {
                    var txtProducto = document.getElementById('txtproducto');
                    var txtPrecio = document.getElementById('txtprecio');
                    var lblDisponible = document.getElementById('lbldisponible');

                    if (data.existe) {
                        // Si existe, actualiza el label con el nombre del producto
                        this.value = codigo;
                        txtProducto.textContent = data.nombreProducto; // Nombre del producto
                        txtPrecio.textContent = data.precio.toFixed(2);
                        lblDisponible.textContent = 'Cantidad Disponible: ' + data.disponible;

                        // Habilitar o deshabilitar el campo de cantidad
                        if (data.disponible > 0) {
                            document.getElementById('txtcantidad').disabled = false; // Habilitar si hay stock disponible
                        } else {
                            document.getElementById('txtcantidad').disabled = true; // Mantener deshabilitado si no hay stock
                            alert('Producto encontrado, pero no hay disponibilidad en el inventario.'); // Notificación al usuario
                        }
                    } else {
                        // Si no existe, muestra la alerta
                        alert(data.mensaje); // Muestra el mensaje de error
                        txtProducto.textContent = ''; // Limpia el campo de producto
                        txtPrecio.textContent = ''; // Limpia el campo de precio
                        lblDisponible.textContent = 'Cantidad Disponible';
                        document.getElementById('txtcantidad').disabled = true; // Deshabilitar el campo de cantidad
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Manejo de errores
                });
        } else {
            // Si el campo codigo está vacío, limpiar el label
            document.getElementById('txtproducto').textContent = '';
            document.getElementById('txtprecio').textContent = '';
        }
    });
 </script>

